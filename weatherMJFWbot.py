import json
import telebot
import requests
import logging
from datetime import datetime
import pytz
import re


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv("all.env")
bot = telebot.TeleBot(API_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.ERROR,
    format='%(asctime)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.FileHandler("error.log"),
        logging.StreamHandler()
    ]
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
def log_client_request(user_id, username, query):
    gmt_time = datetime.now(pytz.timezone('GMT')).strftime('%Y-%m-%d %H:%M:%S')
    with open("clients.log", "a") as clients_log:
        clients_log.write(f"Time: {gmt_time}\nUser ID: {user_id}\nUsername: {username}\nQuery: {query}\n")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–∞–π–ª–æ–≤
def get_wind_direction(dir_code, lang='en'):
    directions_en = {
        "N": "North üåç",
        "NE": "Northeast üåç",
        "E": "East üåç",
        "SE": "Southeast üåç",
        "S": "South üåç",
        "SW": "Southwest üåç",
        "W": "West üåç",
        "NW": "Northwest üåç"
    }
    directions_ru = {
        "N": "–°–µ–≤–µ—Ä üåç",
        "NE": "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫ üåç",
        "E": "–í–æ—Å—Ç–æ–∫ üåç",
        "SE": "–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫ üåç",
        "S": "–Æ–≥ üåç",
        "SW": "–Æ–≥–æ-–∑–∞–ø–∞–¥ üåç",
        "W": "–ó–∞–ø–∞–¥ üåç",
        "NW": "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥ üåç"
    }
    if lang == 'ru':
        return directions_ru.get(dir_code, dir_code)
    return directions_en.get(dir_code, dir_code)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–∞–π–ª–æ–≤ –∫ –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
def get_weather_emoji(temp_c):
    if temp_c <= 0:
        return "‚ùÑÔ∏è"  # Snowflake
    elif temp_c <= 15:
        return "üåßÔ∏è"  # Cloud with rain
    elif temp_c <= 25:
        return "üå§Ô∏è"  # Sun with small cloud
    else:
        return "‚òÄÔ∏è"  # Sun

def get_time_of_day_emoji(local_time):
    hour = int(local_time.split(' ')[1].split(':')[0])
    if 6 <= hour < 18:
        return "üåÖ"  # Sunrise
    else:
        return "üåÉ"  # Night with stars

def get_country_flag_emoji(country_code):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (2 –±—É–∫–≤—ã)
    if len(country_code) == 2 and country_code.isalpha():
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ —Å–∏–º–≤–æ–ª—ã —Ñ–ª–∞–≥–∞
        return chr(127462 + ord(country_code.upper()[0]) - ord('A')) + chr(127462 + ord(country_code.upper()[1]) - ord('A'))
    return "üè≥Ô∏è"  # –ë–µ–ª—ã–π —Ñ–ª–∞–≥ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –µ—Å–ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

def convert_kph_to_mph(kph):
    return round(kph * 0.621371, 1)

def convert_c_to_f(celsius):
    return round(celsius * 9/5 + 32, 1)

@bot.message_handler(content_types=['text'])
def asking(message):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
        log_client_request(message.from_user.id, message.from_user.username, message.text)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        lang = 'ru' if re.search('[\u0400-\u04FF]', message.text) else 'en'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
        response = requests.get(
            f'http://api.weatherapi.com/v1/current.json?key={WAPI_KEY}&q={message.text}&aqi=no'
        )
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏

        data = response.json()

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        loc = data["location"]
        cur = data["current"]

        name = loc['name']
        country = loc['country']
        country_code = loc.get('country_code', 'unknown')
        local_time = loc['localtime']
        temp_c = cur['temp_c']
        temp_f = convert_c_to_f(temp_c)
        feels_like_c = cur['feelslike_c']
        feels_like_f = convert_c_to_f(feels_like_c)
        wind_speed_kph = cur['wind_kph']
        wind_speed_mph = convert_kph_to_mph(wind_speed_kph)
        wind_dir = get_wind_direction(cur['wind_dir'], lang)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–∞–π–ª–æ–≤ –∫ –ø–æ–≥–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        weather_emoji = get_weather_emoji(temp_c)
        time_of_day_emoji = get_time_of_day_emoji(local_time)
        country_flag_emoji = get_country_flag_emoji(country_code)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if lang == 'ru':
            result = (
                f"{time_of_day_emoji} –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {local_time}\n"
                f"{name}, {country_flag_emoji} {country}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_c}¬∞C (F: {temp_f}¬∞F) {weather_emoji} (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like_c}¬∞C ({feels_like_f}¬∞F))\n"
                f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_speed_kph} –∫–º/—á ({wind_speed_mph} –º/—á), –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {wind_dir}"
            )
        else:
            result = (
                f"{time_of_day_emoji} Local time: {local_time}\n"
                f"{name}, {country_flag_emoji} {country}\n"
                f"Temperature: {temp_c}¬∞C ({temp_f}¬∞F) {weather_emoji} (Feels like: {feels_like_c}¬∞C ({feels_like_f}¬∞F))\n"
                f"üå¨Ô∏è Wind: {wind_speed_kph} km/h ({wind_speed_mph} mph), Direction: {wind_dir}"
            )

    except requests.exceptions.RequestException as e:
        moscow_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')
        logging.error(f"{moscow_time} - User: {message.from_user.id} ({message.from_user.username}), Error code: {response.status_code}, Error: {e}")
        if lang == 'ru':
            result = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—Ö–æ–∂—É –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏."
        else:
            result = "Sorry, I cannot find this location."
    except KeyError as e:
        moscow_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')
        logging.error(f"{moscow_time} - User: {message.from_user.id} ({message.from_user.username}), Missing key: {e}")
        if lang == 'ru':
            result = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—Ö–æ–∂—É –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏."
        else:
            result = "Sorry, I cannot find this location."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.reply_to(message, result)

bot.infinity_polling()
